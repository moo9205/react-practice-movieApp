{"ast":null,"code":"'use strict';\n/**\n * @param {string} msg The message to wrap\n * @param {object} opts\n * @param {number|string} [opts.margin] Left margin\n * @param {number} opts.width Maximum characters per line including the margin\n */\n\nmodule.exports = (msg, opts = {}) => {\n  const tab = Number.isSafeInteger(parseInt(opts.margin)) ? new Array(parseInt(opts.margin)).fill(' ').join('') : opts.margin || '';\n  const width = opts.width;\n  return (msg || '').split(/\\r?\\n/g).map(line => line.split(/\\s+/g).reduce((arr, w) => {\n    if (w.length + tab.length >= width || arr[arr.length - 1].length + w.length + 1 < width) arr[arr.length - 1] += ` ${w}`;else arr.push(`${tab}${w}`);\n    return arr;\n  }, [tab]).join('\\n')).join('\\n');\n};","map":{"version":3,"sources":["/home/moo/Desktop/practice/react-practice-movieApp/node_modules/prompts/dist/util/wrap.js"],"names":["module","exports","msg","opts","tab","Number","isSafeInteger","parseInt","margin","Array","fill","join","width","split","map","line","reduce","arr","w","length","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,IAAI,GAAG,EAAb,KAAoB;AACnC,QAAMC,GAAG,GAAGC,MAAM,CAACC,aAAP,CAAqBC,QAAQ,CAACJ,IAAI,CAACK,MAAN,CAA7B,IAA8C,IAAIC,KAAJ,CAAUF,QAAQ,CAACJ,IAAI,CAACK,MAAN,CAAlB,EAAiCE,IAAjC,CAAsC,GAAtC,EAA2CC,IAA3C,CAAgD,EAAhD,CAA9C,GAAoGR,IAAI,CAACK,MAAL,IAAe,EAA/H;AACA,QAAMI,KAAK,GAAGT,IAAI,CAACS,KAAnB;AACA,SAAO,CAACV,GAAG,IAAI,EAAR,EAAYW,KAAZ,CAAkB,QAAlB,EAA4BC,GAA5B,CAAgCC,IAAI,IAAIA,IAAI,CAACF,KAAL,CAAW,MAAX,EAAmBG,MAAnB,CAA0B,CAACC,GAAD,EAAMC,CAAN,KAAY;AACnF,QAAIA,CAAC,CAACC,MAAF,GAAWf,GAAG,CAACe,MAAf,IAAyBP,KAAzB,IAAkCK,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,CAAoBA,MAApB,GAA6BD,CAAC,CAACC,MAA/B,GAAwC,CAAxC,GAA4CP,KAAlF,EAAyFK,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,IAAwB,IAAGD,CAAE,EAA7B,CAAzF,KAA6HD,GAAG,CAACG,IAAJ,CAAU,GAAEhB,GAAI,GAAEc,CAAE,EAApB;AAC7H,WAAOD,GAAP;AACD,GAH8C,EAG5C,CAACb,GAAD,CAH4C,EAGrCO,IAHqC,CAGhC,IAHgC,CAAxC,EAGeA,IAHf,CAGoB,IAHpB,CAAP;AAID,CAPD","sourcesContent":["'use strict';\n/**\n * @param {string} msg The message to wrap\n * @param {object} opts\n * @param {number|string} [opts.margin] Left margin\n * @param {number} opts.width Maximum characters per line including the margin\n */\n\nmodule.exports = (msg, opts = {}) => {\n  const tab = Number.isSafeInteger(parseInt(opts.margin)) ? new Array(parseInt(opts.margin)).fill(' ').join('') : opts.margin || '';\n  const width = opts.width;\n  return (msg || '').split(/\\r?\\n/g).map(line => line.split(/\\s+/g).reduce((arr, w) => {\n    if (w.length + tab.length >= width || arr[arr.length - 1].length + w.length + 1 < width) arr[arr.length - 1] += ` ${w}`;else arr.push(`${tab}${w}`);\n    return arr;\n  }, [tab]).join('\\n')).join('\\n');\n};"]},"metadata":{},"sourceType":"script"}