{"ast":null,"code":"'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst mkdirp = require('make-dir');\n\nconst supportsColor = require('supports-color');\n/**\n * Base class for writing content\n * @class ContentWriter\n * @constructor\n */\n\n\nclass ContentWriter {\n  /**\n   * returns the colorized version of a string. Typically,\n   * content writers that write to files will return the\n   * same string and ones writing to a tty will wrap it in\n   * appropriate escape sequences.\n   * @param {String} str the string to colorize\n   * @param {String} clazz one of `high`, `medium` or `low`\n   * @returns {String} the colorized form of the string\n   */\n  colorize(str\n  /*, clazz*/\n  ) {\n    return str;\n  }\n  /**\n   * writes a string appended with a newline to the destination\n   * @param {String} str the string to write\n   */\n\n\n  println(str) {\n    this.write(`${str}\\n`);\n  }\n  /**\n   * closes this content writer. Should be called after all writes are complete.\n   */\n\n\n  close() {}\n\n}\n/**\n * a content writer that writes to a file\n * @param {Number} fd - the file descriptor\n * @extends ContentWriter\n * @constructor\n */\n\n\nclass FileContentWriter extends ContentWriter {\n  constructor(fd) {\n    super();\n    this.fd = fd;\n  }\n\n  write(str) {\n    fs.writeSync(this.fd, str);\n  }\n\n  close() {\n    fs.closeSync(this.fd);\n  }\n\n} // allow stdout to be captured for tests.\n\n\nlet capture = false;\nlet output = '';\n/**\n * a content writer that writes to the console\n * @extends ContentWriter\n * @constructor\n */\n\nclass ConsoleWriter extends ContentWriter {\n  write(str) {\n    if (capture) {\n      output += str;\n    } else {\n      process.stdout.write(str);\n    }\n  }\n\n  colorize(str, clazz) {\n    const colors = {\n      low: '31;1',\n      medium: '33;1',\n      high: '32;1'\n    };\n    /* istanbul ignore next: different modes for CI and local */\n\n    if (supportsColor.stdout && colors[clazz]) {\n      return `\\u001b[${colors[clazz]}m${str}\\u001b[0m`;\n    }\n\n    return str;\n  }\n\n}\n/**\n * utility for writing files under a specific directory\n * @class FileWriter\n * @param {String} baseDir the base directory under which files should be written\n * @constructor\n */\n\n\nclass FileWriter {\n  constructor(baseDir) {\n    if (!baseDir) {\n      throw new Error('baseDir must be specified');\n    }\n\n    this.baseDir = baseDir;\n  }\n  /**\n   * static helpers for capturing stdout report output;\n   * super useful for tests!\n   */\n\n\n  static startCapture() {\n    capture = true;\n  }\n\n  static stopCapture() {\n    capture = false;\n  }\n\n  static getOutput() {\n    return output;\n  }\n\n  static resetOutput() {\n    output = '';\n  }\n  /**\n   * returns a FileWriter that is rooted at the supplied subdirectory\n   * @param {String} subdir the subdirectory under which to root the\n   *  returned FileWriter\n   * @returns {FileWriter}\n   */\n\n\n  writerForDir(subdir) {\n    if (path.isAbsolute(subdir)) {\n      throw new Error(`Cannot create subdir writer for absolute path: ${subdir}`);\n    }\n\n    return new FileWriter(`${this.baseDir}/${subdir}`);\n  }\n  /**\n   * copies a file from a source directory to a destination name\n   * @param {String} source path to source file\n   * @param {String} dest relative path to destination file\n   * @param {String} [header=undefined] optional text to prepend to destination\n   *  (e.g., an \"this file is autogenerated\" comment, copyright notice, etc.)\n   */\n\n\n  copyFile(source, dest, header) {\n    if (path.isAbsolute(dest)) {\n      throw new Error(`Cannot write to absolute path: ${dest}`);\n    }\n\n    dest = path.resolve(this.baseDir, dest);\n    mkdirp.sync(path.dirname(dest));\n    let contents;\n\n    if (header) {\n      contents = header + fs.readFileSync(source, 'utf8');\n    } else {\n      contents = fs.readFileSync(source);\n    }\n\n    fs.writeFileSync(dest, contents);\n  }\n  /**\n   * returns a content writer for writing content to the supplied file.\n   * @param {String|null} file the relative path to the file or the special\n   *  values `\"-\"` or `null` for writing to the console\n   * @returns {ContentWriter}\n   */\n\n\n  writeFile(file) {\n    if (file === null || file === '-') {\n      return new ConsoleWriter();\n    }\n\n    if (path.isAbsolute(file)) {\n      throw new Error(`Cannot write to absolute path: ${file}`);\n    }\n\n    file = path.resolve(this.baseDir, file);\n    mkdirp.sync(path.dirname(file));\n    return new FileContentWriter(fs.openSync(file, 'w'));\n  }\n\n}\n\nmodule.exports = FileWriter;","map":{"version":3,"sources":["/home/moo/Desktop/practice/react-practice-movieApp/node_modules/istanbul-lib-report/lib/file-writer.js"],"names":["path","require","fs","mkdirp","supportsColor","ContentWriter","colorize","str","println","write","close","FileContentWriter","constructor","fd","writeSync","closeSync","capture","output","ConsoleWriter","process","stdout","clazz","colors","low","medium","high","FileWriter","baseDir","Error","startCapture","stopCapture","getOutput","resetOutput","writerForDir","subdir","isAbsolute","copyFile","source","dest","header","resolve","sync","dirname","contents","readFileSync","writeFileSync","writeFile","file","openSync","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst path = require('path');\nconst fs = require('fs');\nconst mkdirp = require('make-dir');\nconst supportsColor = require('supports-color');\n\n/**\n * Base class for writing content\n * @class ContentWriter\n * @constructor\n */\nclass ContentWriter {\n    /**\n     * returns the colorized version of a string. Typically,\n     * content writers that write to files will return the\n     * same string and ones writing to a tty will wrap it in\n     * appropriate escape sequences.\n     * @param {String} str the string to colorize\n     * @param {String} clazz one of `high`, `medium` or `low`\n     * @returns {String} the colorized form of the string\n     */\n    colorize(str /*, clazz*/) {\n        return str;\n    }\n\n    /**\n     * writes a string appended with a newline to the destination\n     * @param {String} str the string to write\n     */\n    println(str) {\n        this.write(`${str}\\n`);\n    }\n\n    /**\n     * closes this content writer. Should be called after all writes are complete.\n     */\n    close() {}\n}\n\n/**\n * a content writer that writes to a file\n * @param {Number} fd - the file descriptor\n * @extends ContentWriter\n * @constructor\n */\nclass FileContentWriter extends ContentWriter {\n    constructor(fd) {\n        super();\n\n        this.fd = fd;\n    }\n\n    write(str) {\n        fs.writeSync(this.fd, str);\n    }\n\n    close() {\n        fs.closeSync(this.fd);\n    }\n}\n\n// allow stdout to be captured for tests.\nlet capture = false;\nlet output = '';\n\n/**\n * a content writer that writes to the console\n * @extends ContentWriter\n * @constructor\n */\nclass ConsoleWriter extends ContentWriter {\n    write(str) {\n        if (capture) {\n            output += str;\n        } else {\n            process.stdout.write(str);\n        }\n    }\n\n    colorize(str, clazz) {\n        const colors = {\n            low: '31;1',\n            medium: '33;1',\n            high: '32;1'\n        };\n\n        /* istanbul ignore next: different modes for CI and local */\n        if (supportsColor.stdout && colors[clazz]) {\n            return `\\u001b[${colors[clazz]}m${str}\\u001b[0m`;\n        }\n        return str;\n    }\n}\n\n/**\n * utility for writing files under a specific directory\n * @class FileWriter\n * @param {String} baseDir the base directory under which files should be written\n * @constructor\n */\nclass FileWriter {\n    constructor(baseDir) {\n        if (!baseDir) {\n            throw new Error('baseDir must be specified');\n        }\n        this.baseDir = baseDir;\n    }\n\n    /**\n     * static helpers for capturing stdout report output;\n     * super useful for tests!\n     */\n    static startCapture() {\n        capture = true;\n    }\n\n    static stopCapture() {\n        capture = false;\n    }\n\n    static getOutput() {\n        return output;\n    }\n\n    static resetOutput() {\n        output = '';\n    }\n\n    /**\n     * returns a FileWriter that is rooted at the supplied subdirectory\n     * @param {String} subdir the subdirectory under which to root the\n     *  returned FileWriter\n     * @returns {FileWriter}\n     */\n    writerForDir(subdir) {\n        if (path.isAbsolute(subdir)) {\n            throw new Error(\n                `Cannot create subdir writer for absolute path: ${subdir}`\n            );\n        }\n        return new FileWriter(`${this.baseDir}/${subdir}`);\n    }\n\n    /**\n     * copies a file from a source directory to a destination name\n     * @param {String} source path to source file\n     * @param {String} dest relative path to destination file\n     * @param {String} [header=undefined] optional text to prepend to destination\n     *  (e.g., an \"this file is autogenerated\" comment, copyright notice, etc.)\n     */\n    copyFile(source, dest, header) {\n        if (path.isAbsolute(dest)) {\n            throw new Error(`Cannot write to absolute path: ${dest}`);\n        }\n        dest = path.resolve(this.baseDir, dest);\n        mkdirp.sync(path.dirname(dest));\n        let contents;\n        if (header) {\n            contents = header + fs.readFileSync(source, 'utf8');\n        } else {\n            contents = fs.readFileSync(source);\n        }\n        fs.writeFileSync(dest, contents);\n    }\n\n    /**\n     * returns a content writer for writing content to the supplied file.\n     * @param {String|null} file the relative path to the file or the special\n     *  values `\"-\"` or `null` for writing to the console\n     * @returns {ContentWriter}\n     */\n    writeFile(file) {\n        if (file === null || file === '-') {\n            return new ConsoleWriter();\n        }\n        if (path.isAbsolute(file)) {\n            throw new Error(`Cannot write to absolute path: ${file}`);\n        }\n        file = path.resolve(this.baseDir, file);\n        mkdirp.sync(path.dirname(file));\n        return new FileContentWriter(fs.openSync(file, 'w'));\n    }\n}\n\nmodule.exports = FileWriter;\n"]},"metadata":{},"sourceType":"script"}