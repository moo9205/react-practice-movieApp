{"ast":null,"code":"'use strict';\n\nconst readline = require('readline');\n\nconst {\n  action\n} = require('../util');\n\nconst EventEmitter = require('events');\n\nconst {\n  beep,\n  cursor\n} = require('sisteransi');\n\nconst color = require('kleur');\n/**\n * Base prompt skeleton\n * @param {Stream} [opts.stdin] The Readable stream to listen to\n * @param {Stream} [opts.stdout] The Writable stream to write readline data to\n */\n\n\nclass Prompt extends EventEmitter {\n  constructor(opts = {}) {\n    super();\n    this.firstRender = true;\n    this.in = opts.stdin || process.stdin;\n    this.out = opts.stdout || process.stdout;\n\n    this.onRender = (opts.onRender || (() => void 0)).bind(this);\n\n    const rl = readline.createInterface({\n      input: this.in,\n      escapeCodeTimeout: 50\n    });\n    readline.emitKeypressEvents(this.in, rl);\n    if (this.in.isTTY) this.in.setRawMode(true);\n    const isSelect = ['SelectPrompt', 'MultiselectPrompt'].indexOf(this.constructor.name) > -1;\n\n    const keypress = (str, key) => {\n      let a = action(key, isSelect);\n\n      if (a === false) {\n        this._ && this._(str, key);\n      } else if (typeof this[a] === 'function') {\n        this[a](key);\n      } else {\n        this.bell();\n      }\n    };\n\n    this.close = () => {\n      this.out.write(cursor.show);\n      this.in.removeListener('keypress', keypress);\n      if (this.in.isTTY) this.in.setRawMode(false);\n      rl.close();\n      this.emit(this.aborted ? 'abort' : this.exited ? 'exit' : 'submit', this.value);\n      this.closed = true;\n    };\n\n    this.in.on('keypress', keypress);\n  }\n\n  fire() {\n    this.emit('state', {\n      value: this.value,\n      aborted: !!this.aborted,\n      exited: !!this.exited\n    });\n  }\n\n  bell() {\n    this.out.write(beep);\n  }\n\n  render() {\n    this.onRender(color);\n    if (this.firstRender) this.firstRender = false;\n  }\n\n}\n\nmodule.exports = Prompt;","map":{"version":3,"sources":["/home/moo/Desktop/practice/react-practice-movieApp/node_modules/prompts/lib/elements/prompt.js"],"names":["readline","require","action","EventEmitter","beep","cursor","color","Prompt","constructor","opts","firstRender","in","stdin","process","out","stdout","onRender","bind","rl","createInterface","input","escapeCodeTimeout","emitKeypressEvents","isTTY","setRawMode","isSelect","indexOf","name","keypress","str","key","a","_","bell","close","write","show","removeListener","emit","aborted","exited","value","closed","on","fire","render","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst readline = require('readline');\nconst { action } = require('../util');\nconst EventEmitter = require('events');\nconst { beep, cursor } = require('sisteransi');\nconst color = require('kleur');\n\n/**\n * Base prompt skeleton\n * @param {Stream} [opts.stdin] The Readable stream to listen to\n * @param {Stream} [opts.stdout] The Writable stream to write readline data to\n */\nclass Prompt extends EventEmitter {\n  constructor(opts={}) {\n    super();\n\n    this.firstRender = true;\n    this.in = opts.stdin || process.stdin;\n    this.out = opts.stdout || process.stdout;\n    this.onRender = (opts.onRender || (() => void 0)).bind(this);\n    const rl = readline.createInterface({ input:this.in, escapeCodeTimeout:50 });\n    readline.emitKeypressEvents(this.in, rl);\n\n    if (this.in.isTTY) this.in.setRawMode(true);\n    const isSelect = [ 'SelectPrompt', 'MultiselectPrompt' ].indexOf(this.constructor.name) > -1;\n    const keypress = (str, key) => {\n      let a = action(key, isSelect);\n      if (a === false) {\n        this._ && this._(str, key);\n      } else if (typeof this[a] === 'function') {\n        this[a](key);\n      } else {\n        this.bell();\n      }\n    };\n\n    this.close = () => {\n      this.out.write(cursor.show);\n      this.in.removeListener('keypress', keypress);\n      if (this.in.isTTY) this.in.setRawMode(false);\n      rl.close();\n      this.emit(this.aborted ? 'abort' : this.exited ? 'exit' : 'submit', this.value);\n      this.closed = true;\n    };\n\n    this.in.on('keypress', keypress);\n  }\n\n  fire() {\n    this.emit('state', {\n      value: this.value,\n      aborted: !!this.aborted,\n      exited: !!this.exited\n    });\n  }\n\n  bell() {\n    this.out.write(beep);\n  }\n\n  render() {\n    this.onRender(color);\n    if (this.firstRender) this.firstRender = false;\n  }\n}\n\nmodule.exports = Prompt;\n"]},"metadata":{},"sourceType":"script"}